Mistakes:

1.Armostrong mai need to initalize product to before every unit NoSQL
2.If key of map is chaarcter then char c: map.keySet()
3.Arrays.sort(arr) -- Sorts the Array
4.Arrays.equals(arr1,arr2) - Compares two arrays.
5 To remove whitespaces from String

 //Using Regex
        String input="a b c";
        System.out.println(input.replaceAll("\\s","")); // Remeber we need to use \\ for replacement

       //Without regex,just mentioning space
        String s ="a b c d e f";
        System.out.println(s.replace(" ",""));

        String m ="a b c d e f   h     l";
        System.out.println(s.replaceAll("\\s",""));
        //Replace does not support regex
      //  System.out.println(s.replace("\\s",""));

        System.out.println(s.replace(" ",""));

        //Using Character Array
        char[] charArray = input.toCharArray();     //Here we need to char and not Character
        String outputWithoutSpace="";
        for(int i=0;i<charArray.length;i++){
            if(charArray[i] != ' ' && charArray[i] != '\t'){          //Here we need to compare space and tab in
                // single inverted commas
                outputWithoutSpace=outputWithoutSpace + charArray[i];
            }

        }
        System.out.println(outputWithoutSpace);
		
6.You cant replace a charater with nothing -

eg String s = "vishesh"	
 s.replace('v','') => This would not work as you can't replace character with  nothing, Instead you need to do  s.replace("v","") , SO character cannot be replaced by nothing.
 
 
 Below would work where character is replaced by another character
 
 s.replace('v','m')
 

7. s.split("\\s+") ,\\s+ splits across 1 or more space, + incidcates one or ore


String s ="a good   example";

String s ="a good   example";
        String [] sArray = s.split(" ");
        System.out.println(Arrays.toString(sArray));
        String [] sArray1 = s.split("\\s+");
        System.out.println(Arrays.toString(sArray1));
 
 
 
//Output
[a, good, , , example]
[a, good, example]
 



---------------------------------------------------------------------------------------

Problems -

1.continuous sub array of the given array whose sum is equal to given number, Given the staring and ending index building sum or print the list building sum (https://www.geeksforgeeks.org/problems/subarray-with-given-sum-1587115621/1)
int [] arr={12, 5, 31, 9, 21, 8};
int inputNumber=45;

o(n2) approach


class Solution {
    static ArrayList<Integer> subarraySum(int[] arr, int target) {
        // code here
        ArrayList<Integer> list = new ArrayList<>();
        
        int sum;
        
        for(int i=0;i<arr.length;i++){
            sum=0;
            for(int j=i;j<arr.length;j++){
                sum = sum + arr[j];
                if(sum==target){
                    list.add(i+1);
                    list.add(j+1);
                    return list;
                }
                if(sum>target){
                    break;
                }
            }
        }
        list.add(-1);
        return list;
    }
}


o(n) approach


class Solution {
    static ArrayList<Integer> subarraySum(int[] arr, int target) {
        // code here
        ArrayList<Integer> list = new ArrayList<>();
        
        int sum=0;
        int j=0;
        
        for(int i=0;i<arr.length;i++){
            
            sum = sum + arr[i];
            
            while(sum >target && j<=i){
                
                sum = sum - arr[j];
                j++;
            }
            if(sum==target){
                list.add(j+1);
                list.add(i+1);
                return list;
                
            }
        }
        list.add(-1);
        return list;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------

2 https://www.geeksforgeeks.org/problems/demonitisation0013/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

Given 3 Strings S, M and N. Your task is to remove occurences of M and N completely from the given string S.
 After removing every occurence of M and N from the string S, if S becomes empty, then return -1.

*Input:
S = abc
m = ab
n = bc
Output:
-1
Explanation: When we remove the two strings,
we get an empty string and thus the Output -1.

Input:
S =  abbbccab
m = ab
n = bcc
Output:
b

Approach

// User function Template for Java

class Solution {
    static String demonitize(String S, String m, String n) {
        // code here
        S=replace(S,m);
        S=replace(S,n);
        S=replace(S,n);
        if(S.equals("")){
            return "-1";
        }
        else{
            return S;
        }
    }
    
    static String replace(String s,String r){
        if(s.contains(r)){
            s=s.replace(r,"");
        }
        else if(r.contains(s)){
            s=s.replace(s,"");
        }
        return s;
    }
};


----------------------------------------------------------------------------------------------------------------

3. Return second largest element https://www.geeksforgeeks.org/problems/second-largest3735/1

// User function Template for Java

class Solution {
    public int print2largest(int[] arr) {
        int secondMax = Integer.MIN_VALUE;
        int max = arr[0];
        
        for(int i=1;i<arr.length;i++){
            if(arr[i] > max){
                secondMax = max;
                max= arr[i];
            }
            else if(arr[i] > secondMax && arr[i]!=max){
                secondMax = arr[i];
            }
        }
        
        if(secondMax==Integer.MIN_VALUE){
            return -1;
        }
        
        return secondMax;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------
4.Intersection of Array 1 - https://leetcode.com/problems/intersection-of-two-arrays/description/

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();

        for(int i:nums1){
            set1.add(i);
        }

        for(int i:nums2){
            set2.add(i);
        }

        set1.retainAll(set2);

        List<Integer> list = new ArrayList<>(set1);
        return list.stream().mapToInt(e -> e).toArray();

    }
}



4.Intersection of Array 2 - https://leetcode.com/problems/intersection-of-two-arrays-ii/


Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]


class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer,Integer> map = new HashMap<>();
        List<Integer> list = new ArrayList<>();

        for(int i:nums1){
           if(map.containsKey(i)){
              map.put(i,map.get(i) + 1);
           }
           else{
             map.put(i,1);
           }
        }

        for(int i:nums2){
            if(map.containsKey(i)){
               if(map.get(i) > 0){

                list.add(i);
                map.put(i,map.get(i) - 1);
               }
            }

        }
        return list.stream().mapToInt(e->e).toArray();
    }
}

------------------

5. Reverse String using recursion

class ReverseString {
    
    // Recursive method to reverse a string
    static String reverse(String str) {
        // Base condition — stop recursion
        if (str.isEmpty()) {
            return str;
        }

        // Recursive step:
        // reverse the substring (everything except first character)
        // then add the first character at the end
        return reverse(str.substring(1)) + str.charAt(0);
    }

    public static void main(String[] args) {
        String input = "hello";
        String reversed = reverse(input);
        System.out.println("Reversed string: " + reversed);
    }
}


--------------------------------
6. Remove all Characters of string2 from string1 - https://www.geeksforgeeks.org/problems/remove-character3815/1

Input: str1 = "computer", str2= "cat"
Output: "ompuer"

// User function Template for Java
class Solution {
    static String removeChars(String str1, String str2) {
        // code here
        Map<Character,Character> map = new HashMap<>();
        
        char [] cArr = str2.toCharArray();
        
        for(char c:cArr){
                map.put(c,c);
            }
            
        for(char c:map.keySet()){
            str1 = str1.replace(String.valueOf(c),"");
        }    
        
        return str1;
            
        }
        
    }

-------------------------

7./*	Write a java program to reverse a string with preserving the position of spaces. For example, if “I Am Not String” is the given string then the reverse of this string with preserving the position of spaces is “g ni rtS toNmAI”. Notice that the position of spaces in the original string are maintained in the reversed string also. That means, if the given string has a space at index 3, then there should be also a space in the reversed string at index 3.*/


public class ReverseStringWithPreservingSpaces {

/*	Write a java program to reverse a string with preserving the position of spaces. For example, if “I Am Not String” is the given string then the reverse of this string with preserving the position of spaces is “g ni rtS toNmAI”. Notice that the position of spaces in the original string are maintained in the reversed string also. That means, if the given string has a space at index 3, then there should be also a space in the reversed string at index 3.*/


	@Test
	public void reverseStringWithPreservingSpace(){
		String input="I Am Not String";
		char [] inputArray=input.toCharArray();
		int countNoOfSpaces=0;
		List<Integer> spaceAtGivenIndex=new ArrayList<>();

		//Finding total No of spaces and index at which space is present
		for(int i=0;i<inputArray.length;i++){

			if(inputArray[i]==' '){
				countNoOfSpaces++;
				spaceAtGivenIndex.add(i);
			}
		}
		System.out.println(countNoOfSpaces);
		System.out.println(spaceAtGivenIndex);

        //Removing space from the String and reversing it
		String inputWithoutSpaces=input.replaceAll("\\s","");
		StringBuffer reverseWithoutSpaces=new StringBuffer();
		for(int i=inputWithoutSpaces.length()-1;i>=0;i--){
			reverseWithoutSpaces.append(inputWithoutSpaces.charAt(i));
		}

		System.out.println(reverseWithoutSpaces);

		//Adding Spaces in the reversed String at index of original String
		for(int i:spaceAtGivenIndex) {
			reverseWithoutSpaces.insert(i, " ");
		}
		System.out.println(reverseWithoutSpaces);
	}

	@Test
	public void reverseStringWithPreservingSpaceAnotherApproach(){
		String inputString="I Am Not String";
		//Converting inputString to char array 'inputStringArray'
		char[] inputStringArray = inputString.toCharArray();

		//Defining a new char array 'resultArray' with same size as inputStringArray

		char[] resultArray = new char[inputStringArray.length];

		//First for loop :
		//For every space in the 'inputStringArray',
		//we insert spaces in the 'resultArray' at the corresponding positions

		for (int i = 0; i < inputStringArray.length; i++)
		{
			if (inputStringArray[i] == ' ')
			{
				resultArray[i] = ' ';
			}
		}

		//Initializing 'j' with length of resultArray

		int j = resultArray.length-1;

		//Second for loop :
		//we copy every non-space character of inputStringArray
		//from first to last at 'j' position of resultArray

		for (int i = 0; i < inputStringArray.length; i++)
		{
			if (inputStringArray[i] != ' ')
			{
				//If resultArray already has space at index j then decrementing 'j'

				if(resultArray[j] == ' ')
				{
					j--;
				}

				resultArray[j] = inputStringArray[i];

				j--;
			}
		}

		System.out.println(inputString+" ---> "+String.valueOf(resultArray));
		System.out.println(Arrays.toString(resultArray));
	}
}


---------------------------------------------------------

9.Separate Vowel and Consonents

@Test
    public void separateVowelAndConsonents() {
        String s = "abcdeig";
        StringBuilder s1= new StringBuilder();
        StringBuilder s2= new StringBuilder();

        char [] sArr= s.toCharArray();

        for(int i=0;i<sArr.length;i++){
            if(sArr[i]=='a'|| sArr[i]=='e' || sArr[i]=='i' || sArr[i]=='o' || sArr[i]=='u'){
                s1.append(sArr[i]);
            }
            else{
                s2.append(sArr[i]);
            }
        }
       s1.append(s2);
        System.out.println(s1.toString());
    }
	
Two Pointer STrategy

@Test
    public void simpleCodeUsingTwoPointer1() {
        String s = "abcdeig";
        char [] sArr= s.toCharArray();
        int i=0;
        int j=sArr.length - 1;

        while(i<=j){

            if(!isVowel1(sArr[i]) && isVowel1(sArr[j])){
                char c = sArr[i];
                sArr[i] = sArr[j];
                sArr[j] = c;
                i++;
                j--;
            }
            else if(isVowel1(sArr[i])){
                i++;
            }
            else if(!isVowel1(sArr[j])){
                j--;
            }

        }
        System.out.println(String.valueOf(sArr));

    }

    public boolean isVowel1(char c){
        if(c=='a'|| c=='e' || c=='i' || c=='o' || c=='u'){
             return true;
        }
      return false;
    }	


------------------------------------------------------

10.Sort the String in Descending Order - https://www.geeksforgeeks.org/problems/sort-the-string-in-descending-order3542/1

Input: s = "geeks"
Output: "skgee"

// User function Template for Java
class Solution {
    String ReverseSort(String s) {
        // code here
        char [] sArr = s.toCharArray();
        Arrays.sort(sArr);
        
        StringBuilder sb = new StringBuilder(String.valueOf(sArr));
        return sb.reverse().toString();
    }
}

--------------------------------------------------------

11. Creating and retrieving from properties file

@Test
    public void createNewPropertyFile() throws IOException {

        Properties p=new Properties();
        p.setProperty("name","Sonoo Jaiswal123");
        p.setProperty("email","sonoojaiswal@javatpoint.com");

        p.store(new FileWriter("info.properties"),"Javatpoint Properties Example");

    }



   @Test
    public void readValueUsingFileReader() throws IOException {
        Properties prop=new Properties();
        FileReader propfile=new FileReader("/Users/vishesh.gupta/Desktop/JavaPractise/src/main/java/credentials.properties");
        prop.load(propfile);
        System.out.println("Username is :" + prop.getProperty("user"));
        System.out.println("Password is :" + prop.getProperty("password"));
        prop.setProperty("URL","www.google.com");
    }

    @Test
    public void readValueUsingFileInputStream() throws IOException {
        Properties prop=new Properties();
        FileInputStream propfile=new FileInputStream("/Users/vishesh.gupta/Desktop/JavaPractise/src/main/java/credentials.properties");
        prop.load(propfile);
        System.out.println("Username is :" + prop.getProperty("user"));
        System.out.println("Password is :" + prop.getProperty("password"));
    }

---------------------------------------------------------------------

12.Given a string s, return true if the s can be palindrome after deleting at most one character from it.(https://leetcode.com/problems/valid-palindrome-ii/description/)

Input: s = "aba"
Output: true

Input: s = "abca"
Output: true

Input: s = "abc"
Output: false

class Solution {
    public boolean validPalindrome(String s) {
        int i=0;
        int j=s.length() - 1;
        while(i<=j){
          if(s.charAt(i) == s.charAt(j)){
             i++;
             j--;
          }
          else if(isPalindrome(s,i,j-1)){
            return true;
          }
          else if(isPalindrome(s,i+1,j)){
            return true;
          }
          else{
            return false;
          }
        }
        return true;
    }
   public boolean isPalindrome(String s,int i,int j){
      while(i<=j){
           if(s.charAt(i) != s.charAt(j)){
              return false;
           }
           i++;
           j--;
      }
     return true;
   }
    
} 

------------------------------------------------------------------------------
13.Longest Substring Without Repeating Characters (https://leetcode.com/problems/longest-substring-without-repeating-characters/description/)

Input: s = "abcabcbb"
Output: 3

Input: s = "bbbbb"
Output: 1

Input: s = "pwwkew"
Output: 3


class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();
        int max=0;
        int j=0;

        for(int i=0;i<s.length();i++){

            while(set.contains(s.charAt(i)) && j<i){
               set.remove(s.charAt(j));
               j++;
            }

            set.add(s.charAt(i));

            if(set.size()>max){
               max=set.size();
            }

        }
      return max;
        
    }
}

---------------------------------------------------------------------------------------------------------------------
14.Longest Common Prefix (https://leetcode.com/problems/longest-common-prefix/description/)

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""



class Solution {
    public String longestCommonPrefix(String[] strs) {
        Arrays.sort(strs);
        StringBuilder result = new StringBuilder();
        String s1= strs[0];
        String s2 =strs[strs.length - 1];

        for(int i=0;i<s1.length();i++){
           if(s1.charAt(i) == s2.charAt(i)){
              result.append(s1.charAt(i));
           }
           else{
            break;
           }
        }
        return result.toString();
    }
}

-------------------------------------------------------------------------------------------------------
15.Largest Number https://leetcode.com/problems/largest-number/description/

Example 1:

Input: nums = [10,2]
Output: "210"
Example 2:

Input: nums = [3,30,34,5,9]
Output: "9534330"


class Solution {
    public String largestNumber(int[] nums) {
        String [] strArr = new String[nums.length];
        StringBuilder result = new StringBuilder();

        for(int i=0;i<nums.length;i++){
              strArr[i] = String.valueOf(nums[i]);
        }

        Arrays.sort(strArr,(a,b) ->{
            return (b+a).compareTo(a+b);
        });

        if(strArr[0].equals("0")){
             return "0";
        }

        for(String str:strArr){
            result.append(str);
        }
        return result.toString();
    }
}

------------------------------------------------------------------------------------------------------------
16. Group Anagrams https://leetcode.com/problems/group-anagrams/description/

Input: strs = ["eat","tea","tan","ate","nat","bat"]

Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String,List<String>> map = new HashMap<>();

        for(String s:strs){
            char [] cArr = s.toCharArray();
            Arrays.sort(cArr);
            String sSort = String.valueOf(cArr);

            if(map.containsKey(sSort)){
                List<String> list = map.get(sSort);
                list.add(s);
                map.put(sSort,list); 
            }
            else{
               List<String> list1 = new ArrayList<>();
               list1.add(s);
               map.put(sSort,list1); 
            }
        }
        return new ArrayList<>(map.values());
    }
}

-----------------------------------------------------------------
17.Rotate Array https://leetcode.com/problems/rotate-array/s


Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation:
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
*
* */

import org.testng.annotations.Test;

import java.util.Arrays;

public class ArrayRotation {

    @Test
    public void bestSolutionFromRight(){
        int [] nums={1,2,3,4,5,6,7};
        int k=3;
        // Finding the mod of K with arr.length as after every arr.length rotation k=1 rotation occurs/
        // So moding the K reduces K,hence reduces no of rotation
        k=k%nums.length;

        // when K is negative, Then make it positive
        if(k<0){
            k = k + nums.length;
        }

        //Part 1 reverse 1st Part of Array from 0 to nums.length - k -1
        reverse(nums,0,nums.length - k -1);

        //Part 2 reverse 2nd Part of Array from nums.length - k to nums.length -1
        reverse(nums,nums.length - k,nums.length-1);

        //Part 3 reverse the entire array
        reverse(nums,0,nums.length-1);

        System.out.println(Arrays.toString(nums));
    }

    public void reverse(int [] nums,int i,int j){
        while(i<j){
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
            j--;
        }
    }

    @Test
    public void bestSolutionFromLeft(){
        int [] nums={1,2,3,4,5,6,7};
        int k=3;
        // Finding the mod of K with arr.length as after every arr.length rotation k=1 rotation occurs/
        // So moding the K reduces K,hence reduces no of rotation
        k=k%nums.length;

        // when K is negative, Then make it positive
        if(k<0){
            k = k + nums.length;
        }

        //Part 1 reverse 1st Part of Array from 0 to k -1
        reverse(nums,0, k -1);

        //Part 2 reverse 2nd Part of Array from k to nums.length -1
        reverse(nums,k,nums.length-1);

        //Part 3 reverse the entire array
        reverse(nums,0,nums.length-1);

        System.out.println(Arrays.toString(nums));
    }

    @Test
    public void timeTakingSolution(){
        int [] nums={1,2,3,4,5,6,7};
        int k=3;

        for(int i=1;i<=k;i++){
            int temp = nums[nums.length -1];
            for(int j=nums.length -1;j>0;j--){
                nums[j] = nums[j-1];
            }
            nums[0]=temp;
        }
        System.out.println(Arrays.toString(nums));
    }
}


----------------------------
18.Best Time to Buy and Sell Stock https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

public class BestTimeToBuyAndSellStock {

    @Test
    //The Time complexity of given program is o(n2) and space complexity is o(1)
    public void bruteForce(){
        int [] prices ={7,1,5,3,6,4};

        int maxProfit=0;

        for(int i=0;i<prices.length;i++){
            // j<=prices.length as for scenario where array size is only 2 i.e {1,2}
            for(int j=i+1;j<=prices.length-1;j++){
                if(prices[j] > prices[i]){
                    int profit = prices[j] - prices[i];
                    if(profit > maxProfit){
                        maxProfit = profit;
                    }
                }
            }
        }
        System.out.println(maxProfit);
    }

    @Test
    //The Time complexity of given program is o(n) and space complexity is o(n)
    public void Optimized(){
        int [] prices ={7,1,5,3,6,4};

        //Created an array maxPrice to maintain max price from the following date
        int [] maxPriceArr=new int[prices.length]; // [7, 6, 6, 6, 6, 4]
        int maxPrice=0;
        for(int i=maxPriceArr.length-1;i>=0;i--){
            if(prices[i]>maxPrice){
                maxPrice=prices[i];
            }
            maxPriceArr[i]=maxPrice;
        }
        System.out.println(Arrays.toString(maxPriceArr));

        int maxProfit=0;

        for(int i=0;i<prices.length;i++){
            int profit= maxPriceArr[i] - prices[i];
            if(profit > maxProfit){
                maxProfit = profit;
            }
        }
        System.out.println(maxProfit);

    }

    @Test
    //The Time complexity of given program is o(n) and space complexity is o(1)
    /*
    * Algorithmn in simple terms, Minimum price maintain krke chalege and ussi din sell karega and agar profit
    * maxProfit se jyada aata toh msxProfit mai store krlege
    * */
    public void BestSolution(){
        int [] prices ={7,1,5,3,6,4};

        //Initially the minimum price would be the starting price as there are no prices before it.
        int minPrice=prices[0];
        int maxProfit=0;

        for(int i=0;i<prices.length;i++){
            if(prices[i] < minPrice){
                minPrice=prices[i];
            }
            int profit=prices[i] - minPrice;
            if(profit >maxProfit){
                maxProfit=profit;
            }
        }
        System.out.println(maxProfit);
    }
}

----------
19. Best Time to Buy and Sell Stock 2 - https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0

class Solution {
    public int maxProfit(int[] prices) {

        int maxProfit=0;

        for(int i=0;i<prices.length - 1;i++){
           if(prices[i+1] > prices[i]){
               maxProfit = maxProfit + (prices[i+1] - prices[i]);
           }
        }
        return maxProfit;
    }
}

----------------------------------

20. Maximum Subarray - https://leetcode.com/problems/maximum-subarray/description/

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23


class Solution {
    public int maxSubArray(int[] nums) {
        int sum=0;
        int maxSum=Integer.MIN_VALUE;

        for(int i=0;i<nums.length;i++){

            sum = sum + nums[i];
            if(sum >maxSum){
                maxSum = sum;
            }
            if(sum < 0){
                sum=0;
            }
        }
        return maxSum;
    }
}